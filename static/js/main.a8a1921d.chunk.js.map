{"version":3,"sources":["components/Paragraph/index.js","components/Flex/index.js","components/Card/index.js","components/BarChart/index.js","components/Weather/index.js","components/Main/index.js","components/Label/index.js","components/Grid/index.js","helpers/index.js","pages/Pagination/index.js","pages/WeatherBox/index.js","pages/VerticalChart/index.js","pages/CheckBox/index.js","pages/Arrows/index.js","pages/Card/index.js","store/actionTypes/index.js","App.js","store/actions/weather/index.js","store/reducers/weather/index.js","store/reducers/index.js","store/store.js","reportWebVitals.js","index.js"],"names":["Paragraph","styled","p","FlexContainer","div","props","space","margin","StyledCard","Card","BarChartContainer","StyledWeather","StyledCustom","WeatherContainer","children","CustomContainer","title","Wrapper","AppContainer","Label","label","GridContainer","gridColumns","convertToCelsius","value","groupBy","key","array","reduce","acc","obj","property","push","API_URL","process","REACT_APP_KEY","Pagination","data","pageSize","renderChart","dataLimit","length","useState","pages","setTotalPages","currentPage","setCurrentPage","useEffect","Math","ceil","Fragment","goToNextPage","page","goToPreviousPage","start","end","slice","getPaginatedData","map","cardItem","index","cardIndex","prototypes","PropTypes","isRequired","number","func","WeatherBox","weather","dayAverageTemp","setDayAverageTemp","dayTemps","setDayTemps","currentUnit","setSelectedUnit","chartData","setChartData","currentWeatherArr","Object","keys","date","dateKeyArr","values","averageTempF","item","main","temp","cur","averageFeel","feels_like","averagePressure","pressure","averageTemp","averageFeelLike","tempObj","unit","Number","toFixed","feel","pres","findTempPressureAverages","currentDayTemps","day","dayArr","tempArr","timeArr","time","_","findDayTemps","React","useCallback","arr","x","handleChange","target","Chart","width","height","viewBox","preserveAspectRatio","Bar","y","highestTemp","tUnit","yOffset","className","substring","rx","ry","fill","VerticalChart","setLength","max","maxTemp","barHeight","CheckBox","Radio","checked","onChange","name","color","Arrows","onClick","WeatherCard","variant","CardContent","Typography","gutterBottom","actionTypes","App","this","getWeatherData","loading","error","Component","connect","state","dispatch","a","type","Action","payload","axios","get","formattedData","list","id","dt","dt_txt","groupDataByDate","groupedWeatherInfo","message","initialState","rootReducer","combineReducers","action","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8a1921d.chunk.js","sourcesContent":["import styled from \"styled-components\";\nexport const Paragraph = styled.p`\n  font-size: 14px;\n  margin: 2px;\n  text-align: justify;\n`;\n","import styled from \"styled-components\";\n\n// reusable flex container\nexport const FlexContainer = styled.div`\n  display: flex;\n  justify-content: ${(props) => props.space};\n  align-items: center;\n  position: relative;\n  margin: ${(props) => props.margin};\n\n  .hide {\n    display: none;\n  }\n  .arrow {\n    transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n    position: absolute;\n  }\n  .next {\n    right: 0;\n  }\n  .arrow:hover {\n    cursor: pointer;\n    background-color: var(--secondary-color);\n    border-radius: 50%;\n    padding: 3px;\n  }\n`;\n","import styled from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\n// modify Material UI Card\nexport const StyledCard = styled(Card)`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  transition: var(--mainTransition);\n  cursor: pointer;\n  &&:hover {\n    opacity: 0.85;\n    box-shadow: var(--mainShadow);\n  }\n  .value {\n    font-size: 14px;\n  }\n\n  @media (max-width: 700px) {\n    .value {\n      font-size: 10px;\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\n// custom Bar chart container\nexport const BarChartContainer = styled.div`\n  width: 80%;\n  height: 350px;\n  margin: auto;\n  padding: 5px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: var(--primary-color);\n  .time {\n    font-size: 17px;\n  }\n  .time {\n    position: absolute;\n    z-index: 100;\n  }\n  .temp-value {\n    position: relative;\n  }\n  .rect-stroke {\n    stroke: var(--secondary-color);\n    stroke-width: 0.25em;\n    padding-bottom: 10px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Paragraph } from \"../Paragraph\";\n\n// custom weather display container\nexport const StyledWeather = styled.div`\n  width: 85%;\n  min-height: 20vh;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 0.5fr 2fr 1.5fr;\n  row-gap: 10px;\n  padding: 10px;\n  margin: 2rem auto;\n  border-radius: 3px;\n  border: 3px solid var(--secondary-color);\n\n  @media screen and (min-width: 700px) {\n    width: 70%;\n  }\n\n  @media screen and (min-width: 1000px) {\n    width: 50%;\n  }\n`;\n\n// reuse WeatherContainer with display modification\nconst StyledCustom = styled(StyledWeather)`\n  height: 600px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  letter-spacing: 2px;\n`;\n\nexport const WeatherContainer = ({ children }) => {\n  return <StyledWeather>{children}</StyledWeather>;\n};\n\nexport const CustomContainer = ({ children, title }) => {\n  return (\n    <StyledCustom>\n      <Paragraph>{title}</Paragraph>\n      {children}\n    </StyledCustom>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div``;\n\n// app root container\nexport const AppContainer = styled(Wrapper)`\n  margin: 5rem auto;\n`;\n","import styled from \"styled-components\";\nexport const Label = styled.label``;\n","import styled from \"styled-components\";\nexport const GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: ${(props) => props.gridColumns};\n  column-gap: 10px;\n`;\n","// convert t to celsius\nexport const convertToCelsius = (value) => (value - 32) / 1.8;\n// get date from data\nexport const getDay = (date) => {\n  return date.substring(0, 10);\n};\n// get time from data\nexport const getTime = (date) => {\n  return date.substring(10);\n};\n// format data , modify day and time properties\nexport function openWeatherDataFormatter(items) {\n  const tempItems = items.list.map((item) => {\n    const id = item.dt;\n    const day = getDay(item.dt_txt);\n    const time = getTime(item.dt_txt);\n    const weather = { ...item, day, time, id };\n    return weather;\n  });\n  return tempItems;\n}\n//function to group weather objects by date\n// in order to calculate respective temp averages\nexport function groupBy(key) {\n  return function group(array) {\n    return array.reduce((acc, obj) => {\n      const property = obj[key];\n      acc[property] = acc[property] || [];\n      acc[property].push(obj);\n      return acc;\n    }, {});\n  };\n}\nexport const API_URL = `http://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=${process.env.REACT_APP_KEY}&cnt=40`;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { WeatherCard, Arrows } from \"../index\";\nimport { GridContainer } from \"../../components\";\n\nexport const Pagination = (props) => {\n  // destructuring data prop\n  const { data, pageSize, renderChart } = props;\n  const dataLimit = data.length;\n\n  // local state to manage pages and current page\n  const [pages, setTotalPages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    setTotalPages(Math.ceil(dataLimit / pageSize));\n  }, [currentPage, dataLimit, pageSize]);\n\n  function goToNextPage() {\n    setCurrentPage((page) => page + 1);\n  }\n  function goToPreviousPage() {\n    setCurrentPage((page) => page - 1);\n  }\n\n  function getPaginatedData() {\n    const start = currentPage * pageSize - pageSize;\n    const end = start + pageSize;\n    const paginatedItems = data.slice(start, end);\n    return paginatedItems;\n  }\n  return (\n    <React.Fragment>\n      <Arrows\n        goToNextPage={goToNextPage}\n        goToPreviousPage={goToPreviousPage}\n        pages={pages}\n        currentPage={currentPage}\n      />\n      <GridContainer gridColumns='repeat(3, 1fr)'>\n        {getPaginatedData().map((cardItem, index) => {\n          return (\n            <WeatherCard\n              cardItem={cardItem}\n              cardIndex={index}\n              key={index}\n              renderChart={renderChart}\n            />\n          );\n        })}\n      </GridContainer>\n    </React.Fragment>\n  );\n};\nPagination.prototypes = {\n  data: PropTypes.array.isRequired,\n  pageSize: PropTypes.number.isRequired,\n  renderChart: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { WeatherContainer } from \"../../components\";\nimport { convertToCelsius } from \"../../helpers\";\nimport { CheckBox, VerticalChart } from \"../index\";\nimport { Pagination } from \"../Pagination\";\n\nexport const WeatherBox = ({ weather }) => {\n  // local states\n  const [dayAverageTemp, setDayAverageTemp] = useState([]);\n  const [dayTemps, setDayTemps] = useState([]);\n  const [currentUnit, setSelectedUnit] = useState(\"fahrenheit\");\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    // day of week vs averages(temperature and pressure)\n    function findTempPressureAverages() {\n      let currentWeatherArr = [];\n      for (let date of Object.keys(weather)) {\n        // get all object arrays for each date\n        const dateKeyArr = Object.values(weather[date]);\n        // calculate total and average temp/press for each date\n        const totalTempF = dateKeyArr\n          .map((item) => item.main.temp)\n          .reduce((acc, cur) => acc + cur);\n        const averageTempF = totalTempF / dateKeyArr.length;\n\n        const totalFeelTemp = dateKeyArr\n          .map((item) => item.main.feels_like)\n          .reduce((acc, cur) => acc + cur);\n        const averageFeel = totalFeelTemp / dateKeyArr.length;\n        //pressure\n        const totalPressure = dateKeyArr\n          .map((item) => item.main.pressure)\n          .reduce((acc, cur) => acc + cur);\n        const averagePressure = totalPressure / dateKeyArr.length;\n\n        // display correct temp based on unit\n        const averageTemp =\n          currentUnit === \"fahrenheit\"\n            ? averageTempF\n            : convertToCelsius(averageTempF);\n\n        const averageFeelLike =\n          currentUnit === \"fahrenheit\"\n            ? averageFeel\n            : convertToCelsius(averageFeel);\n\n        // create a temp/press object for every date\n        const tempObj = {\n          unit: currentUnit,\n          temp: Number(averageTemp).toFixed(1),\n          feel: Number(averageFeelLike).toFixed(2),\n          pres: Number(averagePressure).toFixed(1),\n          date,\n        };\n        currentWeatherArr.push(tempObj);\n      }\n      setDayAverageTemp(currentWeatherArr);\n    }\n    findTempPressureAverages();\n    return () => {};\n  }, [weather, currentUnit]);\n\n  useEffect(() => {\n    // time of day vs temperature\n    // Bar chart data\n    function findDayTemps() {\n      let currentDayTemps = [];\n      for (let day of Object.keys(weather)) {\n        const dayArr = Object.values(weather[day]);\n        const tempArr = dayArr.map((item) => item.main.temp);\n        const timeArr = dayArr.map((item) => item.time);\n        const tempObj = tempArr.map((_, index) => {\n          return {\n            unit: currentUnit,\n            temp:\n              currentUnit === \"fahrenheit\"\n                ? Number(tempArr[index])\n                : convertToCelsius(Number(tempArr[index])),\n            time: timeArr[index],\n          };\n        });\n        currentDayTemps.push(tempObj);\n      }\n      setDayTemps(currentDayTemps);\n    }\n    findDayTemps();\n    return () => {};\n  }, [weather, chartData, currentUnit]);\n\n  // handle temperature unit toggling\n  const handleChange = ({ target }) => {\n    setSelectedUnit(target.value);\n  };\n\n  // function renderChart(index) {\n  //   for (let arr of Object.keys(dayTemps)) {\n  //     for (let x of arr) {\n  //       if (Number(x) === Number(index)) {\n  //         setChartData(Object.values(dayTemps[index]));\n  //       }\n  //     }\n  //   }\n  // }\n  const renderChart = React.useCallback(\n    function (index) {\n      for (let arr of Object.keys(dayTemps)) {\n        for (let x of arr) {\n          if (Number(x) === Number(index)) {\n            setChartData(Object.values(dayTemps[index]));\n          }\n        }\n      }\n    },\n    [dayTemps]\n  );\n  return (\n    <WeatherContainer>\n      <CheckBox handleChange={handleChange} currentUnit={currentUnit} />\n      <Pagination\n        pageSize={3}\n        data={dayAverageTemp}\n        renderChart={renderChart}\n      />\n      <VerticalChart chartData={chartData} />\n    </WeatherContainer>\n  );\n};\n\nWeatherBox.propTypes = {\n  weather: PropTypes.object.isRequired,\n};\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { BarChartContainer } from \"../../components\";\n\n//Component to render SVG chart\n\nexport const Chart = ({ children, width, height }) => (\n  <svg\n    viewBox={`0 0 ${width} ${height}`}\n    width='100%'\n    height='70%'\n    preserveAspectRatio='xMidYMax meet'\n  >\n    {children}\n  </svg>\n);\n\nexport const Bar = ({ x, y, width, time, unit, height, highestTemp }) => {\n  const tUnit = unit === \"fahrenheit\" ? \"°F\" : \"°C\";\n  const yOffset = unit === \"fahrenheit\" ? 25 : 60;\n  return (\n    <React.Fragment>\n      <text x={x + width / 25} y={y - 20} className='temp-value'>\n        {height.toFixed(1)}\n        {tUnit}\n      </text>\n      <text x={x + width / 25} y={yOffset} className='time'>\n        {time.substring(0, 6)}\n      </text>\n\n      <rect\n        x={x}\n        y={y}\n        rx='5'\n        ry='5'\n        width={width}\n        height={height}\n        fill={highestTemp === height ? `#e0e0e0` : `var(--primary-color)`}\n        className='rect-stroke'\n      />\n    </React.Fragment>\n  );\n};\n\nexport const VerticalChart = ({ chartData }) => {\n  const [length, setLength] = useState(0);\n\n  // component mounting, set length\n  useEffect(() => {\n    setLength(chartData.length);\n  }, [chartData]);\n\n  // Initialization values that include chart and bar dimensions\n  const maxTemp = 380;\n  const chartHeight = maxTemp + 20;\n  const barWidth = 50;\n  const barMargin = 30;\n  const numberOfBars = length;\n  let width = numberOfBars * (barWidth + barMargin);\n\n  // Calculate highest temperature for a day\n  const highestTemp = Math.max(...chartData.map((data) => data.temp));\n\n  return (\n    <BarChartContainer>\n      <Chart height={chartHeight} width={width}>\n        {chartData.map((data, index) => {\n          const barHeight = data.temp;\n          return (\n            <Bar\n              key={index}\n              x={index * (barWidth + barMargin)}\n              y={chartHeight - barHeight}\n              width={barWidth}\n              height={barHeight}\n              unit={data.unit}\n              time={data.time}\n              highestTemp={highestTemp}\n            />\n          );\n        })}\n      </Chart>\n    </BarChartContainer>\n  );\n};\nVerticalChart.propTypes = {\n  chartData: PropTypes.array.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Radio from \"@material-ui/core/Radio\";\nimport { FlexContainer, Wrapper, Label } from \"../../components\";\n\nexport const CheckBox = ({ currentUnit, handleChange }) => {\n  return (\n    <FlexContainer space='space-around'>\n      <Wrapper>\n        <Radio\n          checked={currentUnit === \"celsius\"}\n          onChange={handleChange}\n          value='celsius'\n          name='radio-button-demo'\n          color='primary'\n        />\n        <Label>Celsius</Label>\n      </Wrapper>\n      <Wrapper>\n        <Radio\n          checked={currentUnit === \"fahrenheit\"}\n          onChange={handleChange}\n          value='fahrenheit'\n          name='radio-button-demo'\n          color='primary'\n        />\n        <Label>Fahrenheit</Label>\n      </Wrapper>\n    </FlexContainer>\n  );\n};\nCheckBox.prototypes = {\n  currentUnit: PropTypes.number.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\nimport { FlexContainer } from \"../../components\";\n\nexport const Arrows = ({\n  goToPreviousPage,\n  goToNextPage,\n  pages,\n  currentPage,\n}) => {\n  return (\n    <FlexContainer margin='20px' space='space-between'>\n      <ArrowBackIcon\n        className={`arrow prev ${currentPage === 1 && \"hide\"}`}\n        onClick={() => goToPreviousPage()}\n      />\n\n      <ArrowForwardIcon\n        className={`arrow next ${currentPage === pages && \"hide\"}`}\n        onClick={() => goToNextPage()}\n      />\n    </FlexContainer>\n  );\n};\nArrows.propTypes = {\n  goToNextPage: PropTypes.func.isRequired,\n  goToPreviousPage: PropTypes.func.isRequired,\n  pages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { StyledCard } from \"../../components\";\n\nexport const WeatherCard = ({ renderChart, cardItem, cardIndex }) => {\n  // destructuring cardItem prop\n  const { unit, temp, feel, pres, date } = cardItem;\n\n  // manage card index resetting on click\n  //const [currentIndex, setIndex] = useState(0);\n\n  // initial chart rendering with index=0\n  // useEffect(() => {\n  //   renderChart(currentIndex);\n  // }, [currentIndex, unit]);\n\n  // call renderChart with supplied card index\n  function renderWithNewId(newIndex) {\n    renderChart(newIndex);\n    //setIndex(newIndex);\n  }\n\n  return (\n    <StyledCard variant='outlined' onClick={() => renderWithNewId(cardIndex)}>\n      <CardContent>\n        <Typography className='value' color='textSecondary' gutterBottom>\n          Temp: {temp} {unit === \"fahrenheit\" ? \"°F\" : \"°C\"}\n        </Typography>\n        <Typography className='value' color='textSecondary' gutterBottom>\n          Feels: {feel} {unit === \"fahrenheit\" ? \"°F\" : \"°C\"}\n        </Typography>\n        <Typography className='value' color='textSecondary' gutterBottom>\n          Pres: {pres} P\n        </Typography>\n        <Typography className='value' color='textSecondary' gutterBottom>\n          Date: {date}\n        </Typography>\n      </CardContent>\n    </StyledCard>\n  );\n};\nWeatherCard.propTypes = {\n  renderChart: PropTypes.func.isRequired,\n  cardItem: PropTypes.object.isRequired,\n  cardIndex: PropTypes.number.isRequired,\n};\n","export const actionTypes = {\n  GET_WEATHER_REQUEST: \"GET_WEATHER_REQUEST\",\n  GET_WEATHER_SUCCESS: \"GET_WEATHER_SUCCESS\",\n  GET_WEATHER_FAIL: \"GET_WEATHER_FAIL\",\n};\n","import React from \"react\";\nimport { AppContainer, CustomContainer } from \"./components\";\nimport { WeatherBox } from \"./pages\";\nimport { fetchOpenWeatherData } from \"./store/actions\";\nimport { connect } from \"react-redux\";\n\nclass App extends React.Component {\n  // get weather data upon component mounting\n  componentDidMount() {\n    this.props.getWeatherData();\n  }\n  render() {\n    // destructuring props from state\n    const { data, loading, error } = this.props;\n\n    if (loading) return <CustomContainer title='Loading' />;\n    if (error) return <CustomContainer title='Error' />;\n    return (\n      <AppContainer>\n        <WeatherBox weather={data} />\n      </AppContainer>\n    );\n  }\n}\n// connect component to state and actions\nconst mapStateToProps = (state) => {\n  return {\n    data: state.weather.data,\n    loading: state.weather.loading,\n    error: state.weather.error,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getWeatherData: () => dispatch(fetchOpenWeatherData()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { actionTypes as Action } from \"../../actionTypes\";\nimport axios from \"axios\";\n// import { localData } from \"../../../data\";\nimport { openWeatherDataFormatter, groupBy, API_URL } from \"../../../helpers\";\n\nexport const fetchOpenWeatherData = () => async (dispatch) => {\n  dispatch({\n    type: Action.GET_WEATHER_REQUEST,\n    payload: {},\n  });\n  try {\n    const { data } = await axios.get(API_URL);\n    const formattedData = openWeatherDataFormatter(data);\n    const groupDataByDate = groupBy(\"day\");\n    const groupedWeatherInfo = groupDataByDate(formattedData);\n\n    dispatch({\n      type: Action.GET_WEATHER_SUCCESS,\n      payload: groupedWeatherInfo,\n    });\n  } catch (error) {\n    dispatch({\n      type: Action.GET_WEATHER_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\n// export const fetchLocalWeatherData = () => async (dispatch) => {\n//   dispatch({\n//     type: Action.GET_WEATHER_REQUEST,\n//     payload: {},\n//   });\n//   try {\n//     const formattedData = openWeatherDataFormatter(localData);\n//     const groupDataByDate = groupBy(\"day\");\n//     const newWeatherInfo = groupDataByDate(formattedData);\n//     // dispatch to weather data store\n//     dispatch({\n//       type: Action.GET_WEATHER_SUCCESS,\n//       payload: newWeatherInfo,\n//     });\n//   } catch (error) {\n//     dispatch({\n//       type: Action.GET_WEATHER_FAIL,\n//       payload: error.message,\n//     });\n//   }\n// };\n","import { actionTypes as Action } from \"../../actionTypes\";\n\nconst initialState = {\n  data: {},\n  loading: false,\n  error: \"\",\n};\n\nexport const weatherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Action.GET_WEATHER_REQUEST:\n      return { loading: true };\n    case Action.GET_WEATHER_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        loading: false,\n        error: \"\",\n      };\n    case Action.GET_WEATHER_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { weatherReducer } from \"./weather\";\n\n// combine reducers for scalability\nconst rootReducer = combineReducers({ weather: weatherReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\n// initial redux state\nlet initialState = {};\n// middleware\nexport const middleware = [thunk];\n// Redux store\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store/store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}